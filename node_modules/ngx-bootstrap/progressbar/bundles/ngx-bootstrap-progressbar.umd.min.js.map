{"version":3,"sources":["ng://ngx-bootstrap/progressbar/progressbar.config.ts","ng://ngx-bootstrap/progressbar/progressbar.component.ts","ng://ngx-bootstrap/progressbar/bar.component.ts","ng://ngx-bootstrap/progressbar/progressbar.module.ts"],"names":["ProgressbarConfig","this","animate","max","Injectable","args","providedIn","ProgressbarComponent","config","isStacked","addClass","bars","_max","Object","assign","defineProperty","prototype","value","_animate","forEach","b","_striped","striped","Array","isArray","_value","isBs3","v","bar","recalculatePercentage","addBar","push","removeBar","splice","indexOf","Component","selector","template","Input","HostBinding","type","BarComponent","el","progress","renderer","percent","_type","applyTypeClasses","ngOnInit","ngOnDestroy","toFixed","totalPercentage","reduce","total","_prevType","barTypeClass","bgClass","removeClass","nativeElement","host","role","aria-valuemin","[class.progress-bar-animated]","[class.progress-bar-striped]","[class.active]","[attr.aria-valuenow]","[attr.aria-valuetext]","[attr.aria-valuemax]","[style.height.%]","ElementRef","decorators","Host","Renderer2","ProgressbarModule","forRoot","ngModule","providers","NgModule","imports","CommonModule","declarations","exports"],"mappings":"keAEA,SAAAA,IAKEC,KAAAC,SAAmB,EAEnBD,KAAAE,IAAM,+BAPPC,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,+HC0EZ,SAAAC,EAAYC,GA9BZP,KAAAQ,WAAY,EAuBmBR,KAAAS,UAAW,EAG1CT,KAAAU,KAAuB,GAEbV,KAAAW,KAAO,IAGfC,OAAOC,OAAOb,KAAMO,GAYxB,OAtEEK,OAAAE,eACIR,EAAAS,UAAA,UAAO,KADX,SACYC,GACVhB,KAAKiB,SAAWD,EAChBhB,KAAKU,KAAKQ,SAAO,SAAEC,GACjBA,EAAElB,QAAUe,sCAIhBJ,OAAAE,eACIR,EAAAS,UAAA,UAAO,KADX,SACYC,GACVhB,KAAKoB,SAAWJ,EAChBhB,KAAKU,KAAKQ,SAAO,SAAEC,GACjBA,EAAEE,QAAUL,sCAShBJ,OAAAE,eAEIR,EAAAS,UAAA,QAAK,KAFT,SAEUC,GACRhB,KAAKQ,UAAYc,MAAMC,QAAQP,GAC/BhB,KAAKwB,OAASR,mCAOhBJ,OAAAE,eAAIR,EAAAS,UAAA,QAAK,KAAT,WACE,OAAOU,EAAAA,yCAITb,OAAAE,eAEIR,EAAAS,UAAA,MAAG,KAFP,WAGE,OAAOf,KAAKW,UAGd,SAAQe,GACN1B,KAAKW,KAAOe,EACZ1B,KAAKU,KAAKQ,SAAO,SAAES,GACjBA,EAAIC,4DAcRtB,EAAAS,UAAAc,OAAA,SAAOF,GACLA,EAAI1B,QAAUD,KAAKiB,SACnBU,EAAIN,QAAUrB,KAAKoB,SAEnBpB,KAAKU,KAAKoB,KAAKH,IAGjBrB,EAAAS,UAAAgB,UAAA,SAAUJ,GACR3B,KAAKU,KAAKsB,OAAOhC,KAAKU,KAAKuB,QAAQN,GAAM,wBAlF5CO,EAAAA,UAAS9B,KAAA,CAAC,CACT+B,SAAU,cACVC,SAAA,8PAEE,mHATKrC,sCAmBNsC,EAAAA,uBAQAA,EAAAA,oBASAA,EAAAA,qBAIAA,EAAAA,mBAgBAC,EAAAA,YAAWlC,KAAA,CAAC,aAAU,CAAAmC,KACtBF,EAAAA,wBAYAC,EAAAA,YAAWlC,KAAA,CAAC,qBAoBfE,sBCTE,SAAAkC,EACUC,EACAC,EACAC,GAFA3C,KAAAyC,GAAAA,EAEAzC,KAAA2C,SAAAA,EAlByB3C,KAAAS,UAAW,EAQ9CT,KAAA4C,QAAU,EAYR5C,KAAK0C,SAAWA,EAyCpB,OA5FE9B,OAAAE,eACI0B,EAAAzB,UAAA,OAAI,KADR,WAEE,OAAOf,KAAK6C,WAGd,SAASnB,GACP1B,KAAK6C,MAAQnB,EACb1B,KAAK8C,oDAIPlC,OAAAE,eACI0B,EAAAzB,UAAA,QAAK,KADT,WAEE,OAAOf,KAAKwB,YAGd,SAAUE,IACHA,GAAW,IAANA,KAGV1B,KAAKwB,OAASE,EACd1B,KAAK4B,0DAGPhB,OAAAE,eACI0B,EAAAzB,UAAA,cAAW,KADf,WAIE,OAFAf,KAAK4B,wBAEE5B,KAAK4C,yCAKdhC,OAAAE,eAAI0B,EAAAzB,UAAA,QAAK,KAAT,WACE,OAAOU,EAAAA,yCAoBTe,EAAAzB,UAAAgC,SAAA,WACE/C,KAAK0C,SAASb,OAAO7B,OAGvBwC,EAAAzB,UAAAiC,YAAA,WACEhD,KAAK0C,SAASX,UAAU/B,OAG1BwC,EAAAzB,UAAAa,sBAAA,WACE5B,KAAK4C,UAAY5C,KAAKgB,MAAQhB,KAAK0C,SAASxC,IAAM,KAAK+C,QAAQ,OAEzDC,EAAkBlD,KAAK0C,SAAShC,KACnCyC,QAAM,SAAWC,EAAezB,GAC/B,OAAOyB,EAAQzB,EAAIiB,UAClB,GAEDM,EAAkB,MACpBlD,KAAK4C,SAAWM,EAAkB,MAI9BV,EAAAzB,UAAA+B,iBAAR,WACE,GAAI9C,KAAKqD,UAAW,KACZC,EAAe,gBAAgBtD,KAAKqD,UACpCE,EAAU,MAAMvD,KAAKqD,UAC3BrD,KAAK2C,SAASa,YAAYxD,KAAKyC,GAAGgB,cAAeH,GACjDtD,KAAK2C,SAASa,YAAYxD,KAAKyC,GAAGgB,cAAeF,GACjDvD,KAAKqD,UAAY,KAGnB,GAAIrD,KAAK6C,MAAO,CACRS,EAAe,gBAAgBtD,KAAK6C,MACpCU,EAAU,MAAMvD,KAAK6C,MAC3B7C,KAAK2C,SAASlC,SAAST,KAAKyC,GAAGgB,cAAeH,GAC9CtD,KAAK2C,SAASlC,SAAST,KAAKyC,GAAGgB,cAAeF,GAC9CvD,KAAKqD,UAAYrD,KAAK6C,4BA5G3BX,EAAAA,UAAS9B,KAAA,CAAC,CACT+B,SAAU,MACVC,SAAA,8BACAsB,KAAM,CACJC,KAAM,cACNC,gBAAiB,IACjBC,gCAAiC,oBACjCC,+BAAgC,UAChCC,iBAAkB,mBAClBC,uBAAwB,QACxBC,wBAAyB,0CACzBC,uBAAwB,MACxBC,mBAAoB,sDArBtBC,EAAAA,kBAIO9D,EAAoB+D,WAAA,CAAA,CAAA9B,KAwExB+B,EAAAA,cA3EHC,EAAAA,2CA2BClC,EAAAA,qBAWAA,EAAAA,2BAaAC,EAAAA,YAAWlC,KAAA,CAAC,mCAOZkC,EAAAA,YAAWlC,KAAA,CAAC,yBA6DfoC,sBCzHA,SAAAgC,KASA,OAHSA,EAAAC,QAAP,WACE,MAAO,CAAEC,SAAUF,EAAmBG,UAAW,yBAPpDC,EAAAA,SAAQxE,KAAA,CAAC,CACRyE,QAAS,CAACC,EAAAA,cACVC,aAAc,CAACvC,EAAclC,GAC7B0E,QAAS,CAACxC,EAAclC,OAM1BkE","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProgressbarConfig {\n  /** if `true` changing value of progress bar will be animated */\n  animate: Boolean = false;\n  /** maximum total value of progress element */\n  max = 100;\n}\n","import { Component, HostBinding, Input } from '@angular/core';\nimport { ProgressbarConfig } from './progressbar.config';\nimport { ProgressbarType } from './progressbar-type.interface';\nimport { isBs3 } from 'ngx-bootstrap/utils';\nimport { BarComponent } from './bar.component';\n\n@Component({\n  selector: 'progressbar',\n  templateUrl: './progressbar.component.html',\n  styles: [\n    `\n    :host {\n      width: 100%;\n      display: flex;\n    }\n  `\n  ]\n})\nexport class ProgressbarComponent {\n  /** if `true` changing value of progress bar will be animated */\n  @Input()\n  set animate(value: boolean) {\n    this._animate = value;\n    this.bars.forEach((b: BarComponent) => {\n      b.animate = value;\n    });\n  }\n  /** If `true`, striped classes are applied */\n  @Input()\n  set striped(value: boolean) {\n    this._striped = value;\n    this.bars.forEach((b: BarComponent) => {\n      b.striped = value;\n    });\n  }\n\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input() type: ProgressbarType;\n  /** current value of progress bar. Could be a number or array of objects\n   * like {\"value\":15,\"type\":\"info\",\"label\":\"15 %\"}\n   */\n  @Input()\n  /* tslint:disable-next-line:no-any */\n  set value(value: number | any[]) {\n    this.isStacked = Array.isArray(value);\n    this._value = value;\n  }\n  isStacked = false;\n  _striped: boolean;\n  _animate: boolean;\n  /* tslint:disable-next-line:no-any */\n  _value: number | any[];\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  /** maximum total value of progress element */\n  @HostBinding('attr.max')\n  @Input()\n  get max(): number {\n    return this._max;\n  }\n\n  set max(v: number) {\n    this._max = v;\n    this.bars.forEach((bar: BarComponent) => {\n      bar.recalculatePercentage();\n    });\n  }\n\n  @HostBinding('class.progress') addClass = true;\n\n  /* tslint:disable-next-line:no-any */\n  bars: BarComponent[] = [];\n\n  protected _max = 100;\n\n  constructor(config: ProgressbarConfig) {\n    Object.assign(this, config);\n  }\n  addBar(bar: BarComponent): void {\n    bar.animate = this._animate;\n    bar.striped = this._striped;\n\n    this.bars.push(bar);\n  }\n\n  removeBar(bar: BarComponent): void {\n    this.bars.splice(this.bars.indexOf(bar), 1);\n  }\n}\n","import {\n  Component,\n  Host,\n  HostBinding,\n  Input,\n  OnDestroy,\n  OnInit,\n  ElementRef,\n  Renderer2\n} from '@angular/core';\n\nimport { ProgressbarComponent } from './progressbar.component';\nimport { isBs3 } from 'ngx-bootstrap/utils';\n\n// todo: number pipe\n// todo: use query from progress?\n@Component({\n  selector: 'bar',\n  templateUrl: './bar.component.html',\n  host: {\n    role: 'progressbar',\n    'aria-valuemin': '0',\n    '[class.progress-bar-animated]': '!isBs3 && animate',\n    '[class.progress-bar-striped]': 'striped',\n    '[class.active]': 'isBs3 && animate',\n    '[attr.aria-valuenow]': 'value',\n    '[attr.aria-valuetext]': 'percent ? percent.toFixed(0) + \"%\" : \"\"',\n    '[attr.aria-valuemax]': 'max',\n    '[style.height.%]': '\"100\"'\n  }\n})\nexport class BarComponent implements OnInit, OnDestroy {\n  max: number;\n\n  /** provide one of the four supported contextual classes: `success`, `info`, `warning`, `danger` */\n  @Input()\n  get type(): string {\n    return this._type;\n  }\n\n  set type(v: string) {\n    this._type = v;\n    this.applyTypeClasses();\n  }\n\n  /** current value of progress bar */\n  @Input()\n  get value(): number {\n    return this._value;\n  }\n\n  set value(v: number) {\n    if (!v && v !== 0) {\n      return;\n    }\n    this._value = v;\n    this.recalculatePercentage();\n  }\n\n  @HostBinding('style.width.%')\n  get setBarWidth() {\n    this.recalculatePercentage();\n\n    return this.percent;\n  }\n\n  @HostBinding('class.progress-bar') addClass = true;\n\n  get isBs3(): boolean {\n    return isBs3();\n  }\n\n  striped: boolean;\n  animate: boolean;\n  percent = 0;\n  progress: ProgressbarComponent;\n\n  protected _value: number;\n  protected _type: string;\n  private _prevType: string;\n\n  constructor(\n    private el: ElementRef,\n    @Host() progress: ProgressbarComponent,\n    private renderer: Renderer2\n  ) {\n    this.progress = progress;\n  }\n\n  ngOnInit(): void {\n    this.progress.addBar(this);\n  }\n\n  ngOnDestroy(): void {\n    this.progress.removeBar(this);\n  }\n\n  recalculatePercentage(): void {\n    this.percent = +(this.value / this.progress.max * 100).toFixed(2);\n\n    const totalPercentage = this.progress.bars\n      .reduce(function (total: number, bar: BarComponent): number {\n        return total + bar.percent;\n      }, 0);\n\n    if (totalPercentage > 100) {\n      this.percent -= totalPercentage - 100;\n    }\n  }\n\n  private applyTypeClasses(): void {\n    if (this._prevType) {\n      const barTypeClass = `progress-bar-${this._prevType}`;\n      const bgClass = `bg-${this._prevType}`;\n      this.renderer.removeClass(this.el.nativeElement, barTypeClass);\n      this.renderer.removeClass(this.el.nativeElement, bgClass);\n      this._prevType = null;\n    }\n\n    if (this._type) {\n      const barTypeClass = `progress-bar-${this._type}`;\n      const bgClass = `bg-${this._type}`;\n      this.renderer.addClass(this.el.nativeElement, barTypeClass);\n      this.renderer.addClass(this.el.nativeElement, bgClass);\n      this._prevType = this._type;\n    }\n  }\n}\n","import { CommonModule } from '@angular/common';\nimport { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { BarComponent } from './bar.component';\nimport { ProgressbarComponent } from './progressbar.component';\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [BarComponent, ProgressbarComponent],\n  exports: [BarComponent, ProgressbarComponent]\n})\nexport class ProgressbarModule {\n  static forRoot(): ModuleWithProviders<ProgressbarModule> {\n    return { ngModule: ProgressbarModule, providers: [] };\n  }\n}\n"]}